// Object destructuring: 
//////////////////////////
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

// Fetch chaining
////////////////////
fetch('https://v6.exchangerate-api.com/v6/5c2aae274290b9a672b18c92/pair/AUD/SGD'+amount, {mode:'cors'})
		// 1. Call the API with the correct method and headers
		.then(res=>res.json())
		// 2. Get the JSON response
       		.then(resObj=>{
            		if (!('Global Quote' in resObj))
                		throw 'Quote is not valid, likely Symbol does not exist'
            		setUserQuery([...userQuery, {symbol:localSymbol, quantity:localQuantity, purchasePrice:localPrice, currPrice:34.5, pnl:55}])
        		})
       		.catch(err=>setInputError(err))


// USING AWAIT, ASYNC
/////////////////////
async function getAPI(){
	...
        
	try{
		const res = await fetch('https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo', {mode:'cors'});
        	const resObj = await res.json();

		if (!('symbol' in resObj))
                	throw 'Quote is not valid, likely Symbol does not exist'

		if (!('price' in resObj))
                	throw 'Current Price not available'

		setQuote(resObj);
	}
    	catch(err){
		setError(err);        	
    	}


//////////////////////////////
// EVENT LISTENER RUN ONCE AND REMOVE SELF
//////////////////////////////
element.addEventListener('eventname', () => {
    console.log("event is captured only once.");
    ......
  }, { once: true });


//////////////////////////////////
// SPLIT string into array using regex
//////////////////////////////////

const array = date.split(/[-T:]/)



///////////////////////////
// BLOB and BLOB URL
///////////////////////////
// https://www.youtube.com/watch?v=WqBs_msUOXY&t=18s

const data = 'some data';

// create a blob (binary large obj)
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
// text/plain is the default value for textual files. A textual file should be human-readable and must not contain binary data.
// application/octet-stream is the default value for all other cases. An unknown file type should use this type. Browsers are particularly careful when manipulating these files to protect users from software vulnerabilities and possible dangerous behavior.

const blob = new Blob([data], { type: 'text/plain' });

// Create URL for data blob
const url = URL.createObjectURL(blob);

// Now its a 'url', user can download it, access it etc
a.href = url;
a.download = 'blob.txt';

// Good practice to release blob after you are done
URL.revokeObjectURL(url);


// ANother example

// create URL
const url = URL.createObjectURL(imgObj);

// set as new image src
// show the imgObj on the HTML
const img = new Image();
img.src = url;
img.onload = () => {
	document.body.appendChild(img);
}

// Good practice to release blob after you are done
URL.revokeObjectURL(url);




